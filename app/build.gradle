apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

configurations {
    natives
}

android {
    signingConfigs {
        config {
            // Declare these variables on gradle.properties. Do not put sensitive data here.
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
        }
    }
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "es.danirod.rectball.android"
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 423
        versionName "0.4.11"
        signingConfig signingConfigs.config
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            buildConfigField "boolean", "FINE_DEBUG", "false"
            buildConfigField "boolean", "ANALYTICS_DRY_RUN", "false"
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "boolean", "FINE_DEBUG", "true"
            buildConfigField "boolean", "ANALYTICS_DRY_RUN", "true"
            versionNameSuffix "-dev"
        }
    }
    /*
     * Support multiple product flavours in order to have two builds. The default one is the
     * GPE (Google Play Edition). This is the flavour you download from the Google Play Store.
     * However, there is the OSP (Open Source Project), which has the same features but it is
     * not linked against Google Play SDK nor Firebase SDK, therefore it doesn't depend on
     * non-free components.
     *
     * People who don't want non-free in their coffee should build the OSP version. In fact,
     * the GPE version will probably fail to build unless you provide the API keys for the SDKs
     * and I'm not sharing these in the repository.
     */
    flavorDimensions "channel"
    productFlavors {
        gpe {
            dimension "channel"

            // No version name suffix because this is the default version.
        }
        osp {
            dimension "channel"

            // Mark this version as the Open Source Project.
            versionNameSuffix "-OSP"
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    // libGDX
    compile "com.badlogicgames.gdx:gdx-backend-android:$libgdx_version"
    compile "com.badlogicgames.gdx:gdx-freetype:$libgdx_version"
    natives "com.badlogicgames.gdx:gdx-platform:$libgdx_version:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$libgdx_version:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$libgdx_version:natives-x86"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$libgdx_version:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$libgdx_version:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-freetype-platform:$libgdx_version:natives-x86"

    // Google Play Services are required on the Google Play version.
    gpeCompile "com.google.android.gms:play-services-analytics:17.0.0"
    gpeCompile "com.google.android.gms:play-services-games:11.0.4"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

// Extract the libGDX natives from the JARs.
task copyAndroidNatives() {
    file("src/main/jniLibs/armeabi/").mkdirs();
    file("src/main/jniLibs/armeabi-v7a/").mkdirs();
    file("src/main/jniLibs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("src/main/jniLibs/armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("src/main/jniLibs/armeabi")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("src/main/jniLibs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
repositories {
    mavenCentral()
}

apply plugin: 'com.google.gms.google-services'
